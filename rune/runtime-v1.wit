//! Host functions provided by the proc-block prober.

/// Metadata describing a single node in the Machine Learning pipeline.
resource metadata {
    /// Create a new metadata object with the provided name and version number.
    ///
    /// The name should typically be one or two words that concisely describe
    /// the node and will be used as the human-friendly label shown to users
    /// when referring to it.
    static new: function(name: string, version: string) -> metadata
    /// A human-friendly description of the node.
    ///
    /// The text may include markdown.
    set-description: function(description: string)
    /// A repository containing this node's source code.
    set-repository: function(url: string)
    /// The node's home page.
    ///
    /// This will typically point to a `README` file or a page on the internet
    /// that users can go to when they want to find out more about the node.
    set-homepage: function(url: string)
    /// Associate this node with a particular tag.
    ///
    /// Tags are typically used to assist in search and filtering.
    add-tag: function(tag: string)
    /// Arguments this node accepts.
    add-argument: function(arg: argument-metadata)
    /// Information about this node's input tensors.
    add-input: function(metadata: tensor-metadata)
    /// Information about this node's output tensors.
    add-output: function(metadata: tensor-metadata)
}

/// Information about a node's argument.
resource argument-metadata {
    /// Create a new named argument.
    static new: function(name: string) -> argument-metadata
    /// A human-friendly description of the argument.
    ///
    /// The text may include markdown.
    set-description: function(description: string)
    /// A useful default value for this argument.
    set-default-value: function(default-value: string)
    add-hint: function (hint: argument-hint)
}

/// The format an argument's value may be in.
enum type-hint {
    integer,
    float,
    oneline-string,
    multiline-string,
}

/// Information about a tensor.
resource tensor-metadata {
    /// Create a new named tensor.
    static new: function(name: string) -> tensor-metadata
    /// A human-friendly description of the tensor.
    ///
    /// The text may include markdown.
    set-description: function(description: string)
    /// Add a hint that provides the runtime with contextual information about
    /// this node.
    add-hint: function(hint: tensor-hint)
}

/// Hints that can be used by the runtime when inspecting a tensor.
resource tensor-hint

/// Hint to the runtime that a tensor may be displayed as an image.
interpret-as-image: function() -> tensor-hint

/// Hint to the runtime that a tensor may be interpreted as an audio clip.
interpret-as-audio: function() -> tensor-hint

/// Hint that a tensor may have a particular shape and the element types it
/// supports.
///
/// Note: This hint will be removed in the future in favour of a more flexible
/// mechanism.
supported-shapes: function(supported-element-types: list<element-type>, dimensions: dimensions) -> tensor-hint

/// The various types of values a tensor may contain.
enum element-type {
    uint8,
    int8,
    uint16,
    int16,
    uint32,
    int32,
    float32,
    uint64,
    int64,
    float64,
    /// A string as UTF-8 encoded bytes.
    utf8,
}


/// The dimensions that a tensor may have.
variant dimensions {
    /// There can be an arbitrary number of dimensions with arbitrary sizes.
    dynamic,
    /// The tensor has a fixed rank with the provided dimension sizes.
    ///
    /// If a particular dimension's length is zero, that is interpreted as the
    /// dimension being allowed to have any arbitrary length.
    fixed(list<u32>),
}

/// Hints that can be used by the runtime when inspecting an argument
resource argument-hint
/// Hint to the runtime that an argument may be interpreted as a number in `[min, max]`
interpret-as-number-in-range: function(min: string, max: string) -> argument-hint
/// Hint to the runtime that an argument may be interpreted as a string in a defined list
interpret-as-string-in-enum: function(string-enum: list<string>) -> argument-hint

/// Register a node type with the runtime.
register-node: function(metadata: metadata)
